// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String          @id @default(uuid())
  firstName               String          @default("")
  lastName                String          @default("")
  role                    ROLE            @default(BASIC)
  createdAt               DateTime        @default(now())
  accountBalance          Decimal         @default(0)
  transactions            Transaction[]
  email                   String          @unique
  userLocalCompostStand   CompostStand?   @relation(fields: [userLocalCompostStandId], references: [CompostStandId])
  userLocalCompostStandId Int?
  CompostReport           CompostReport[]

  // index by email for sorting and querying
  @@index([email])
}

// each transaction has multiple users associated with it
model Transaction {
  id          String   @id @default(uuid())
  users       User[]
  amount      Decimal
  createdAt   DateTime @default(now())
  category    Category
  purchaserId String
  recipientId String
  reason      String
}

enum Category {
  GROCERIES
  MISC
  GARDEN
  GIFT
}

// to ensure values can only be a small amount of options
enum ROLE {
  BASIC
  ADMIN
}

enum DRYMATTERPRESENT {
  yes
  some
  no
}

// one compost stand can have many reports
// one compost stand can have many users
model CompostStand {
  CompostStandId Int             @id
  name           String
  Reports        CompostReport[]
  User           User[]
}

model CompostReport {
  compostStandId   Int              @unique
  compostStand     CompostStand     @relation(fields: [compostStandId], references: [CompostStandId])
  depositWeight    Decimal
  compostSmell     Boolean
  dryMatterPresent DRYMATTERPRESENT
  notes            String
  date             DateTime         @default(now())
  user             User             @relation(fields: [userId], references: [id])
  userId           String
}
